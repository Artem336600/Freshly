from flask import Flask, request, jsonify
from mistralai import Mistral
from flask_cors import CORS
import os
from supabase import create_client

# üî• –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase
SUPABASE_URL = "https://rgyhaiaecqusymobdqdd.supabase.co"  # –¢–≤–æ–π API URL
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJneWhhaWFlY3F1c3ltb2JkcWRkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzgyNDY5MjgsImV4cCI6MjA1MzgyMjkyOH0.rUUTC4oMhBBxAoHR9MNSlV8YpAz4FwRU1p4RaQBhY70"  # –¢–≤–æ–π API Key

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Flask
app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º –∫—Ä–æ—Å—Å-–¥–æ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Mistral —Å API-–∫–ª—é—á–æ–º
api_key = 'smKrnj6cMHni2QSNHZjIBInPlyErMHSu'
model = "mistral-small-latest"
client = Mistral(api_key=api_key)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_available_products():
    response = supabase.table("products").select("*").execute()
    return response.data

@app.route('/get_products_info', methods=['POST'])
def get_products_info():
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        products = get_available_products()

        # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        if not products:
            return jsonify({"error": "–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."}), 500

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∏—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        product_info = []
        for product in products:
            product_info.append({
                "name": product['name'],
                "quantity": product['quantity'],
                "expiration_date": product['expiration_date'],
                "priority": product['priority']
            })

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
        return jsonify({
            "products": product_info
        })

    except Exception as e:
        return jsonify({"error": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"}), 500

@app.route('/get_products', methods=['POST'])
def get_products():
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_message = request.json.get('message')

        if not user_message:
            return jsonify({"error": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."}), 400

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        products_info = get_products_info()

        # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        if not products_info:
            return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."}), 500

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –∑–∞–ø—Ä–æ—Å –∫ –ò–ò
        products_list = "\n".join([f"{i+1}. –ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product['quantity']}, –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏: {product['expiration_date']}, –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {product['priority']}" for i, product in enumerate(products_info)])

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ò–ò
        user_message_with_products = f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤:\n{products_list}\n–ö–∞–∫–∏–µ –Ω–∞–±–æ—Ä—ã –º–æ–∂–Ω–æ –∏–∑ –Ω–∏—Ö —Å–æ—Å—Ç–∞–≤–∏—Ç—å?"

        # –ó–∞–ø—Ä–æ—Å –∫ Mistral –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        chat_response = client.chat.complete(
            model=model,
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –≤ –ø–æ–¥–±–æ—Ä–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–∏—Ç–∞–Ω–∏—è. –ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–µ–º—ã –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑ 20 –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏–¥–µ–∞–ª—å–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∑–∞–ø—Ä–æ—Å—É. –í –æ—Ç–≤–µ—Ç–µ –≤—ã–≤–æ–¥–∏ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤ —Å—Ç–æ–ª–±–∏–∫, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ —Ç–µ–∫—Å—Ç–∞. –°—Ç–∞—Ä–∞–π—Å—è, —á—Ç–æ–±—ã –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –±—ã–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏, —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö (–æ–≤–æ—â–∏, –º—è—Å–æ, —Ñ—Ä—É–∫—Ç—ã –∏ —Ç.–¥.). –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª–µ–¥–∏ –∑–∞ —Ç–µ–º, —á—Ç–æ–±—ã –ø—Ä–æ–¥—É–∫—Ç—ã –±—ã–ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∏ –ø–æ–¥—Ö–æ–¥–∏–ª–∏ –ø–æ–¥ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
                },
                {
                    "role": "user",
                    "content": user_message_with_products
                },
            ]
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        return jsonify({
            "response": chat_response.choices[0].message.content
        })

    except Exception as e:
        return jsonify({"error": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"}), 500

@app.route('/add_product', methods=['POST'])
def add_product():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        data = request.json
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        required_fields = ['name', 'quantity', 'expiration_date', 'priority']
        for field in required_fields:
            if field not in data:
                return jsonify({"error": f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {field}."}), 400
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Supabase
        response = supabase.table('products').insert({
            'name': data['name'],
            'quantity': data['quantity'],
            'expiration_date': data['expiration_date'],
            'priority': data['priority']
        }).execute()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ –Ω–∞–ª–∏—á–∏—é –¥–∞–Ω–Ω—ã—Ö
        if not response.data:  # –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
            return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."}), 500
        
        # –ï—Å–ª–∏ –≤—Å—ë –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        return jsonify({"message": "–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω."}), 201

    except Exception as e:
        return jsonify({"error": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"}), 500
@app.route('/delete_product', methods=['POST'])
def delete_product():
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        product_id = request.json.get('id')

        if not product_id:
            return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –ø—Ä–æ–¥—É–∫—Ç–∞."}), 400

        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID
        response = supabase.table('products').delete().eq('id', product_id).execute()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª–µ–Ω
        if response.data == []:  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
            return jsonify({"error": "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."}), 404

        return jsonify({"message": "–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω."}), 200

    except Exception as e:
        return jsonify({"error": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"}), 500

@app.route('/update_product', methods=['POST'])
def update_product():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        data = request.json
        product_id = data.get('id')
        updated_info = {key: value for key, value in data.items() if key != 'id'}

        if not product_id:
            return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –ø—Ä–æ–¥—É–∫—Ç–∞."}), 400

        if not updated_info:
            return jsonify({"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."}), 400

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –ø–æ ID
        response = supabase.table('products').update(updated_info).eq('id', product_id).execute()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if not response.data:
            return jsonify({"error": "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."}), 404

        return jsonify({"message": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."}), 200

    except Exception as e:
        return jsonify({"error": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"}), 500


# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == '__main__':
    app.run(debug=True, host="0.0.0.0", port=int(os.getenv("PORT", 5000)))
